name: Deploy to EC2
on:
  push:
    branches:
      - main
jobs:
  deploy:
  # Github actions runs the job on the latest ubuntu version
    runs-on: ubuntu-latest

    steps:
    # Pulls out the latest code
      - name: Checkout the code
        uses: actions/checkout@v3
        
    # Ensures that SSH is installed on the runner so it can ssh to the instance
      - name: Install SSH client
        run: sudo apt-get update -y && sudo apt-get install openssh-client -y

      # Log the runner's public IP address
      - name: Get Runner Public IP Address
        run: |
          echo "Fetching the runner's public IP address..."
          IP=$(curl -s https://checkip.amazonaws.com)
          echo "Public IP Address of the Runner: $IP"

      # Configure AWS CLI credentials
      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_CLI_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_CLI_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-2

      # Allow inbound access to the security group
      - name: Allow inbound access to security group
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.SG_ID }} \
            --protocol tcp --port 22 --cidr $(curl -s https://checkip.amazonaws.com)/32 || true

      - name: Add SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{secrets.SSH_PRIVATE_KEY}}"  | base64 --decode > ~/.ssh/deploy_key.pem
          chmod 600 ~/.ssh/deploy_key.pem
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/deploy_key.pem
          # Add the server to known_hosts to avoid confirmation prompt
          ssh-keyscan -H ${{secrets.EC2_HOST}} >> ~/.ssh/known_hosts
          ssh-add -l

      - name: Deploy application to EC2
        run: |
          ssh -i ~/.ssh/deploy_key.pem -v ${{secrets.EC2_USER}}@${{secrets.EC2_HOST}} << 'EOF'
          cd ${{secrets.EC2_APP_PATH}}
          git pull origin main
          EOF
          
      # Revoke the temporary access
      - name: Revoke Access to Security Group
        run: |
          echo "Revoking temporary access from the security group..."
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.SG_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${IP}/32 || true
          echo "Access revoked successfully."
